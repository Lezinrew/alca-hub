#!/bin/bash

# Script de Desenvolvimento - Al√ßa Hub
# Desenvolvimento em tempo real com hot reload

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Fun√ß√£o para verificar se Docker est√° rodando
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        error "Docker n√£o est√° rodando. Inicie o Docker Desktop primeiro."
        exit 1
    fi
    success "Docker est√° rodando"
}

# Fun√ß√£o para verificar arquivo .env
check_env() {
    if [ ! -f .env ]; then
        warning "Arquivo .env n√£o encontrado. Criando arquivo .env de exemplo..."
        cat > .env << EOF
# Configura√ß√µes do Al√ßa Hub
SECRET_KEY=dev-secret-change-me-in-production
MONGO_ROOT_USERNAME=admin
MONGO_ROOT_PASSWORD=password123
MONGO_DATABASE=alca_hub
DEBUG=1
ENV=dev

# Mercado Pago (opcional)
MERCADO_PAGO_ACCESS_TOKEN=
MERCADO_PAGO_PUBLIC_KEY=
WEBHOOK_SECRET=
EOF
        success "Arquivo .env criado com configura√ß√µes padr√£o"
    else
        success "Arquivo .env encontrado"
    fi
}

# Fun√ß√£o para limpar containers antigos
cleanup() {
    log "Limpando containers antigos..."
    docker compose -f docker-compose.dev.yml down --remove-orphans 2>/dev/null || true
    success "Containers antigos removidos"
}

# Fun√ß√£o para construir imagens
build_images() {
    log "Construindo imagens de desenvolvimento..."
    docker compose -f docker-compose.dev.yml build --no-cache
    success "Imagens constru√≠das com sucesso"
}

# Fun√ß√£o para iniciar servi√ßos
start_services() {
    log "Iniciando servi√ßos de desenvolvimento..."
    docker compose -f docker-compose.dev.yml up -d
    
    # Aguardar servi√ßos ficarem saud√°veis
    log "Aguardando servi√ßos ficarem prontos..."
    sleep 10
    
    # Verificar sa√∫de dos servi√ßos
    check_health
}

# Fun√ß√£o para verificar sa√∫de dos servi√ßos
check_health() {
    log "Verificando sa√∫de dos servi√ßos..."
    
    # Verificar MongoDB
    if docker exec alca-hub-mongo-dev mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
        success "MongoDB est√° saud√°vel"
    else
        error "MongoDB n√£o est√° respondendo"
        return 1
    fi
    
    # Verificar Backend
    if curl -f http://localhost:8000/ping > /dev/null 2>&1; then
        success "Backend est√° saud√°vel"
    else
        error "Backend n√£o est√° respondendo"
        return 1
    fi
    
    # Verificar Frontend
    if curl -f http://localhost:3000 > /dev/null 2>&1; then
        success "Frontend est√° saud√°vel"
    else
        error "Frontend n√£o est√° respondendo"
        return 1
    fi
}

# Fun√ß√£o para mostrar status
show_status() {
    echo ""
    echo "üöÄ Al√ßa Hub - Desenvolvimento"
    echo "================================"
    echo "üìä Status dos Servi√ßos:"
    docker compose -f docker-compose.dev.yml ps
    echo ""
    echo "üåê URLs de Acesso:"
    echo "  Frontend: http://localhost:3000"
    echo "  Backend:  http://localhost:8000"
    echo "  MongoDB:  mongodb://localhost:27017"
    echo ""
    echo "üìù Logs em tempo real:"
    echo "  docker compose -f docker-compose.dev.yml logs -f"
    echo ""
    echo "üîÑ Para reiniciar um servi√ßo:"
    echo "  docker compose -f docker-compose.dev.yml restart [service]"
    echo ""
    echo "üõë Para parar tudo:"
    echo "  docker compose -f docker-compose.dev.yml down"
    echo ""
}

# Fun√ß√£o para monitorar mudan√ßas
monitor_changes() {
    log "Iniciando monitoramento de mudan√ßas..."
    warning "Pressione Ctrl+C para parar o monitoramento"
    
    # Monitorar mudan√ßas nos arquivos
    while true; do
        if inotifywait -r -e modify,create,delete ./backend ./frontend 2>/dev/null; then
            log "Mudan√ßa detectada! Verificando se restart √© necess√°rio..."
            
            # Verificar se √© mudan√ßa no backend
            if [ -f "./backend/server.py" ] || [ -f "./backend/requirements.txt" ]; then
                warning "Mudan√ßa no backend detectada. Reiniciando backend..."
                docker compose -f docker-compose.dev.yml restart backend
                success "Backend reiniciado"
            fi
            
            # Verificar se √© mudan√ßa no frontend
            if [ -f "./frontend/src" ] || [ -f "./frontend/package.json" ]; then
                warning "Mudan√ßa no frontend detectada. Frontend com hot reload deve atualizar automaticamente."
            fi
            
            sleep 2
        fi
    done
}

# Fun√ß√£o principal
main() {
    echo "üöÄ Iniciando Al√ßa Hub - Modo Desenvolvimento"
    echo "============================================="
    
    # Verifica√ß√µes iniciais
    check_docker
    check_env
    
    # Limpeza e constru√ß√£o
    cleanup
    build_images
    
    # Iniciar servi√ßos
    start_services
    
    # Mostrar status
    show_status
    
    # Perguntar se quer monitorar mudan√ßas
    echo "Deseja iniciar o monitoramento de mudan√ßas? (y/n)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        monitor_changes
    else
        success "Desenvolvimento iniciado! Acesse http://localhost:3000"
        log "Para ver logs: docker compose -f docker-compose.dev.yml logs -f"
        log "Para parar: docker compose -f docker-compose.dev.yml down"
    fi
}

# Executar fun√ß√£o principal
main "$@"
