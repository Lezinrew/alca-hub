# Docker Compose para Alça Hub - Orquestração de Serviços

services:
  # Banco de dados MongoDB
  mongo:
    image: mongo:latest
    container_name: alca-hub-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-alca_hub}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    networks:
      - alca-hub-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: alca-hub-backend
    restart: unless-stopped
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - DB_NAME=${MONGO_DATABASE:-alca_hub}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-change-me}
      - MERCADO_PAGO_ACCESS_TOKEN=${MERCADO_PAGO_ACCESS_TOKEN}
      - MERCADO_PAGO_PUBLIC_KEY=${MERCADO_PAGO_PUBLIC_KEY}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
      - DEBUG=${DEBUG:-0}
      - ENV=${ENV:-dev}
    ports:
      - "8000:8000"
    volumes:
      - backend_logs:/app/logs
    networks:
      - alca-hub-network
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: alca-hub-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    networks:
      - alca-hub-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Volumes nomeados para persistência
volumes:
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  backend_logs:
    driver: local

# Network isolada para comunicação entre serviços
networks:
  alca-hub-network:
    driver: bridge
    name: alca-hub-network
